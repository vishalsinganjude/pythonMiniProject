# -*- coding: utf-8 -*-
"""covidDash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L8tBCWbfo6gNPO21jp7DnjzN9Q8IrIeD
"""

import pandas as pd  #data analysis and manipulation
import matplotlib.pyplot as plt #Data Visualization

# import plotly
import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.express as px

import plotly.io as pio
pio.renderers.default = 'colab'  #initialize Plotly

# upload the files in google colab
from google.colab import files
files.upload()

covid_data = pd.read_csv('covid.csv')
covid_data.head()
#print(covid_data)

#importing the data using pandas
covid_group = pd.read_csv('covid_grouped.csv')
covid_group.head()
#print(covid_group)



# cleaning the data
covid_data.columns #shows the column name
covid_data.drop(['NewCases', 'NewDeaths', 'NewRecovered'], axis=1, inplace=True)
covid_data.columns #shows the column name

# create table
from plotly.figure_factory import create_table
table = create_table(covid_data.head(10), colorscale="reds")
py.iplot(table)

# Check Column names
covid_data.columns

"""## **Total Cases vs Country**"""

px.bar(covid_data.head(10), x='Country/Region', y='TotalCases', color='Country/Region', height=500, hover_data=['Country/Region', 'Continent'])

"""## **Total Deaths Vs Countries**"""

#Total deaths
px.bar(covid_data.head(10), x='Country/Region', y='TotalDeaths', color='Country/Region', height=500, hover_data=['Country/Region', 'Continent'])

"""## **Total Recovered Vs Countries**"""

px.bar(covid_data.head(10), x='Country/Region', y='TotalRecovered', color='TotalRecovered', height=500, hover_data=['Country/Region', 'Continent'])

"""## **Total Test Vs Countries** ( Orientation )"""

px.bar(covid_data.head(10), x='TotalTests', y='Country/Region', color='TotalTests',orientation='h', height=500, hover_data=['Country/Region', 'Continent'])

px.bar(covid_data.head(10), x='TotalTests', y='Continent', color='TotalTests',orientation='h', height=500, hover_data=['Country/Region', 'Continent'])

"""## px.scatter, x, y, size, color, hover_data, size_max, log_x, log_y"""

# px.scatter, x, y, size, color, hover_data, size_max, log_x, log_y
covid_data.columns

"""## **Total Cases vs Continent** ( 50 Countries )"""

px.scatter(covid_data.head(50), x='Continent', y='TotalCases', hover_data=['Country/Region', 'Continent'], color='TotalCases',
           size='TotalCases', size_max=80)

px.scatter(covid_data.head(50), x='Continent', y='TotalCases', hover_data=['Country/Region', 'Continent'], color='TotalCases',
           size='TotalCases', size_max=80, log_y=True)

"""## **Total Tests vs Continent** ( 50 Countries )"""

px.scatter(covid_data.head(50), x='Continent', y='TotalTests', hover_data=['Country/Region', 'Continent'], color='TotalTests',
           size='TotalTests', size_max=80)

px.scatter(covid_data.head(50), x='Continent', y='TotalTests', hover_data=['Country/Region', 'Continent'], color='TotalTests',
           size='TotalTests', size_max=80, log_y=True)

"""## **Total Deaths Vs Continent** ( 20 Countries )"""

px.scatter(covid_data.head(50), x='Continent', y='TotalDeaths', hover_data=['Country/Region', 'Continent'], color='TotalDeaths',
           size='TotalDeaths', size_max=80, log_y=True)

"""## **Total Cases Vs Countries** ( All )"""

px.scatter(covid_data.head(100), x='Country/Region', y='TotalCases', hover_data=['Country/Region', 'Continent'], color='TotalCases',
           size='TotalCases', size_max=80)

px.scatter(covid_data.head(30), x='Country/Region', y='TotalCases', hover_data=['Country/Region', 'Continent'], color='Country/Region',
           size='TotalCases', size_max=80, log_y=True)

"""## **Total Deaths Vs Country** ( Top 10 )"""

px.scatter(covid_data.head(10), x='Country/Region', y='TotalDeaths', hover_data=['Country/Region', 'Continent'], color='Country/Region',
           size='TotalDeaths', size_max=80, log_y=True)

"""## **Total Tests/1M Vs Countries** ( top 50 )"""

px.scatter(covid_data.head(10), x='Country/Region', y='Tests/1M pop', hover_data=['Country/Region', 'Continent'], color='Country/Region',
           size='Tests/1M pop', size_max=80)

px.scatter(covid_data.head(30), x='Country/Region', y='Tests/1M pop', hover_data=['Country/Region', 'Continent'], color='Country/Region',
           size='Tests/1M pop', size_max=80)

px.scatter(covid_data.head(30), x='Country/Region', y='Tests/1M pop', hover_data=['Country/Region', 'Continent'], color='Tests/1M pop',
           size='Tests/1M pop', size_max=80)

# Check Column names
covid_data.columns

"""## **Total Cases Vs Total Deaths**"""

px.scatter(covid_data.head(30), x='TotalCases', y='TotalDeaths', hover_data=['Country/Region', 'Continent'], color='TotalDeaths',
           size='TotalDeaths', size_max=90)

px.scatter(covid_data.head(30), x='TotalCases', y='TotalDeaths', hover_data=['Country/Region', 'Continent'], color='TotalDeaths',
           size='TotalDeaths', size_max=90, log_x=True, log_y=True)

"""## **Total Tests Vs Total Cases**"""

px.scatter(covid_data.head(30), x='TotalTests', y='TotalCases', hover_data=['Country/Region', 'Continent'], color='TotalTests',
           size='TotalTests', size_max=90, log_x=True, log_y=True)

"""## **This Dataset contains Date column which makes it more aprropriate for more advanced data visualization**"""

covid_group.columns

"""## **Date Vs Confirmed** ( All Countries )"""

px.bar(covid_group, x='Date', y='Confirmed', color='Confirmed', hover_data=['Confirmed','Date', 'Country/Region'], height=400)

px.bar(covid_group, x='Date', y='Confirmed', color='Confirmed', hover_data=['Confirmed','Date', 'Country/Region'],log_y=True, height=400)

"""## **Date Vs Death** (All Countries) ( Line Graph )"""

px.bar(covid_group, x='Date', y='Deaths', color='Deaths', hover_data=['Confirmed','Date', 'Country/Region'],log_y=False, height=400)

df_us = covid_group.loc[covid_group["Country/Region"]=="US"]

"""## Date Vs Confirmed (US)"""

px.bar(df_us, x='Date', y='Confirmed', color='Confirmed', height=500)

"""## Date Vs Recoverd ( US )"""

px.bar(df_us, x='Date', y='Recovered', color='Recovered', height=500)

px.line(df_us, x='Date', y='Recovered', height=500)

"""## Date Vs Deaths ( US )"""

px.line(df_us, x='Date', y='Deaths', height=500)

"""## Date Vs Confirmed (US) (line)"""

px.line(df_us, x='Date', y='Confirmed', height=500)

"""## Date Vs NewCases"""

px.line(df_us, x='Date', y='New cases', height=500)

px.bar(df_us, x='Date', y='New cases', height=500)

"""## Date Vs New Cases ( India )"""

df_india = covid_group.loc[covid_group["Country/Region"]=="India"]

px.bar(df_india, x='Date', y='New cases', height=500)

px.line(df_india, x='Date', y='New cases', height=500)

"""## Date Vs Confirmed ( India )"""

px.bar(df_india, x='Date', y='Confirmed', height=500)

"""## Date Vs Death ( INDIA )"""

px.bar(df_india, x='Date', y='Deaths', height=500)

"""## Date Vs New Deaths"""

px.bar(df_india, x='Date', y='New deaths', height=500)

"""## Date Vs Recovered"""

px.bar(df_india, x='Date', y='Recovered', height=500)

"""## Date Vs New recovered"""

px.bar(df_india, x='Date', y ='New recovered', height=500)

"""## US Scatter"""

px.scatter(df_us, x='Confirmed', y='Deaths', height=500)

"""## India Scatter"""

px.scatter(df_india, x='Confirmed', y='New cases', height=500)

px.scatter(df_india, x='Date', y='New cases', height=500)

"""# Represent Geographic Data as Choropleth Maps

## **Equi-rectangular Projection: Total Cases**
"""

px.choropleth(covid_group, locations="iso_alpha",
              color="Confirmed",
              hover_name="Country/Region",
              color_continuous_scale="reds",
              animation_frame="Date")

"""## **Equi-rectangular Projection: Deaths**"""

px.choropleth(covid_group, locations="iso_alpha",
              color="Deaths",
              hover_name="Country/Region",
              color_continuous_scale="Viridis",
              animation_frame="Date")

"""## **Orthographic Projection: Total Deaths**"""

px.choropleth(covid_group, locations="iso_alpha",
              color="Deaths",
              hover_name="Country/Region",
              color_continuous_scale="Viridis",
              projection="orthographic",
              animation_frame="Date")

"""## **Natural earth Projection: Recovered**"""

px.choropleth(covid_group, locations="iso_alpha",
              color="Recovered",
              hover_name="Country/Region",
              color_continuous_scale="RdYlGn",
              projection="natural earth",
              animation_frame="Date")

"""# **Animations**

## **Bar Annimation :** *Total Cases*
"""

px.bar(covid_group, x='WHO Region', y='Confirmed', color='WHO Region', animation_frame='Date', hover_name='Country/Region')

"""## **Bar Annimation :** *New Cases*"""

px.bar(covid_group, x='WHO Region', y='New cases', color='WHO Region', animation_frame='Date', hover_name='Country/Region')

"""## **Bar Annimation :** *Total Deaths*"""

px.bar(covid_group, x='WHO Region', y='New deaths', color='WHO Region', animation_frame='Date', hover_name='Country/Region')

px.bar(covid_group, x='WHO Region', y='New recovered', color='WHO Region', animation_frame='Date', hover_name='Country/Region')